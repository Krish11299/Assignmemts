 1 use mongo_practice
 2  db.createCollection('movies')

3  db.movies.insertMany([{ title:"Fight Club", writer:"Chuck Palahniuko", year: 1999,
actors: [ "Brad Pitt",
"Edward Norton"
]},
{
title:"Pulp Fiction", writer:"Quentin Tarantino", year: 1994,
actors: [
"John Travolta", "Uma Thurman"
]},
{
title:"Inglorious Basterds", writer:"Quentin Tarantino", year: 2009,
actors: [ "Brad Pitt",
"Diane Kruger", "Eli Roth"
]},
 
{
title:"The Hobbit: An Unexpected Journey", writer:"J.R.R.Tolkein",
year:2012, franchise:"The Hobbit"
},
{
title:"The Hobbit: The Desolation of Smaug", writer:"J.R.R.Tolkein",
year: 2012, franchise:"The Hobbit",
synopsis:"Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."
},
{
title:"Pee Wee Herman's Big Adventure"
},
{
title:"Avatar"
}])

4 db.movies.find().pretty()
5 db.movies.findOne({writer:"Quentin Tarantino"})
6 db.movies.find({actors:"Brad Pitt"})
7 db.movies.find({franchise:"The Hobbit"})
8 db.movies.find({$and: [{year: {$gt: 1900}}, {year: {$lt: 2000}}]})
9 db.movies.find({$or: [{year: {$lt: 2000}}, {year: {$gt: 2010}}]})

UPDATE DOCCUMENTS

db.movies.update({ title: 'The Hobbit: An Unexpected Journey' }, { $set: { synopsis: "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug." }})

db.movies.update({ title: 'The Hobbit: The Desolation of Smaug' }, { $set: { synopsis: "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})
db.movies.update({ title: 'Pulp Fiction' }, { $push: { actors: 'Samuel L. Jackson' } });

TEXT SEARCH

db.movies.createIndex({synopsis: "text"})

db.movies.find({$text: {$search: "Bilbo"}})
db.movies.find({$text: {$search: "Gandalf"}})
db.movies.find({$text: {$search: "Bilbo -Gandalf"}})
db.movies.find({$text: {$search: "dwarves hobbit"}})
db.movies.find({$text: {$search: "gold dragon"}})

DELETE DOCCUMENTS

db.movies.remove({title: "Pee Wee Herman's Big Adventure"})
db.movies.remove({title: "Avatar"})

RELATIONSHIPS
db.users.insertMany([{ username: "GoodGuyGreg", first_name: "Good Guy", last_name: "Greg"
},
{
username: "ScumbagSteve", full_name: {
first: "Scumbag", last: "Steve"
}
}]);

db.posts.insertMany([{
username: "GoodGuyGreg",
title: "Passes out at party",
body: "Wakes up early and cleans house"
},
{
username: "GoodGuyGreg", title: "Steals your identity", body: "Raises your credit score"
},
{
username: "GoodGuyGreg",
 
title: "Reports a bug in your code", body: "Sends you a Pull Request"
},
{
username: "ScumbagSteve", title: "Borrows something", body: "Sells it"
},
{
username: "ScumbagSteve", title: "Borrows everything", body: "The end"
},
{
username: "ScumbagSteve",
title: "Forks your repo on github", body: "Sets to private"
}]);


db.comments.insertMany([{
username: "GoodGuyGreg",
comment: "Hope you got a good deal!",
post: ObjectId("5f44d3a148197d7749864def")
},
{
username: "GoodGuyGreg",
comment: "Don't violate the licensing agreement!", post: ObjectId("5f44d3a148197d7749864df0")
},
{
username: "GoodGuyGreg",
comment: "Don't violate the licensing agreement!", post: ObjectId("5f44d3a148197d7749864df1")
},
{
username: "ScumbagSteve", comment: "It still isn't clean",
post: ObjectId("5f44d3a148197d7749864dec")
},
{
username: "ScumbagSteve",
comment: "Denied your PR cause I found a hack", post: ObjectId("5f44d3a148197d7749864dee")
}]);


db.users.find().pretty();
db.posts.find().pretty();
db.posts.find({ username: 'GoodGuyGreg' }).pretty();
db.posts.find({ username: 'ScumbagSteve' }).pretty();
db.comments.find().pretty();
db.comments.find({ username: 'GoodGuyGreg' }).pretty();
db.comments.find({ username: 'ScumbagSteve' }).pretty();

db.posts.aggregate([{
$match: { title: 'Reports a bug in your code' }
},
{
$lookup: {
from: 'comments', localField: '_id', foreignField: 'post', as: 'comments'
}}]).pretty();






